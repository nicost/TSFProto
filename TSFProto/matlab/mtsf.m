classdef mtsf
    %mtsf Matlab interface to tagged spot format
    %   The tagged spot format is an implementation of Google Protocols 
    %   Buffer to the storage of single molecule fitting data such as 
    %   used in super resolution techniques like
    %   STORM and PALM.  This matlab code interfaces to the Java
    %   code generated by Google Protocol Buffers based on tsf.proto
    
    properties
        applicationId
        boxSize
        imageFileName
        fitMode
        intensityUnits
        locationUnits
        nrSpots
        nrChannels
        nrFrames
        nrPixelsX
        nrPixelsY
        nrPos
        nrSlices
        pixelSize
        spotList
        fileName
        fi
    end
    
    methods
        % constructs mtsf object given the path to a tagged spot format
        % file
        function mt = mtsf(fileName)
            mt.fileName = fileName;
            mt.fi = java.io.FileInputStream(mt.fileName);
            mt.spotList = javaMethod('parseDelimitedFrom', 'edu.ucsf.tsf.TaggedSpotsProtos$SpotList', mt.fi);
            
            if (mt.spotList.hasNrSpots)
                mt.nrSpots = mt.spotList.getNrSpots;
            end
            if (mt.spotList.hasApplicationId)
                mt.applicationId = mt.spotList.getApplicationId;
            end
            if (mt.spotList.hasBoxSize)
                mt.boxSize = mt.spotList.getBoxSize;
            end
            if (mt.spotList.hasFilepath)
                mt.imageFileName = char(mt.spotList.getFilepath);
            end
            if (mt.spotList.hasFitMode)
                if (mt.spotList.getFitMode == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$FitMode', 0))
                    mt.fitMode = 'One Axis';                       
                end
                if (mt.spotList.getFitMode == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$FitMode', 1))
                    mt.fitMode = 'Two Axis';                       
                end
                if (mt.spotList.getFitMode == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$FitMode', 2))
                    mt.fitMode = 'Two Axis and Theta';                       
                end
            end
            if (mt.spotList.hasIntensityUnits)
                if (mt.spotList.getIntensityUnits == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$IntensityUnits', 0))
                    mt.intensityUnits = 'Counts';
                elseif (mt.spotList.getIntensityUnits == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$IntensityUnits', 1))
                    mt.intensityUnits = 'Photons';
                end
            end
            if (mt.spotList.hasLocationUnits)
                if (mt.spotList.getLocationUnits == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$LocationUnits', 0))
                    mt.locationUnits = 'nm';
                elseif (mt.spotList.getLocationUnits == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$LocationUnits', 1))
                    mt.locationUnits = 'pixels';
                elseif (mt.spotList.getLocationUnits == javaMethod('valueOf','edu.ucsf.tsf.TaggedSpotsProtos$LocationUnits', 2))
                    mt.locationUnits = 'um';
                end
            end
            if (mt.spotList.hasNrChannels)
                mt.nrChannels = mt.spotList.getNrChannels;
            end
            if (mt.spotList.hasNrFrames)
                mt.nrFrames = mt.spotList.getNrFrames;
            end
            if (mt.spotList.hasNrPixelsX)
                mt.nrPixelsX = mt.spotList.getNrPixelsX;
            end
            if (mt.spotList.hasNrPixelsY)
                mt.nrPixelsY = mt.spotList.getNrPixelsY;
            end
            if (mt.spotList.hasNrPos)
                mt.nrPos = mt.spotList.getNrPos;
            end
            if (mt.spotList.hasNrSlices)
                mt.nrSlices = mt.spotList.getNrSlices;
            end
            if (mt.spotList.hasPixelSize)
                mt.pixelSize = mt.spotList.getPixelSize;
            end
            
            
        end % mtsf
        

        % The following functions can be used as an example to write code
        % to access other fields in the tsf file
        % Performance of these functions is quite poor: calling the getX
        % function on a dataset with 550,000 took 360 seconds. 
        % Calling getXY on the same dataset took 745 seconds.
        
        % 
        function spot = getNextSpot(mt)
            spot = zeros(1,10);
            sp = javaMethod('parseDelimitedFrom', 'edu.ucsf.tsf.TaggedSpotsProtos$Spot', mt.fi);
            spot(1, 1) = sp.getMolecule;
            spot(1, 2) = sp.getChannel;
            spot(1, 3) = sp.getFrame;
            spot(1, 4) = sp.getSlice;
            spot(1, 5) = sp.getPos;
            spot(1, 6) = sp.getX;
            spot(1, 7) = sp.getY;
            spot(1, 8) = sp.getIntensity;
            spot(1, 9) = sp.getBackground;
            spot(1, 10) = sp.getWidth;
            
        end
        
        % Retrieve x values in a 1D array of size (nrSpots, 1)
        function  x = getX(mt) 
            x = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                x(i,1) = mt.spotList.get(i-1).getX;
            end           
        end  % getX
        
        % Retrieve y values in a 1D array of size (nrSpots, 1)
        function  y = getY(mt) 
            y = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                y(i,1) = mt.spotList.get(i-1).getY;
            end           
        end  % getY
        
        % Retrieve xy values in a 2D array of size (nrSpots, 2)
        function  xy = getXY(mt) 
            xy = zeros(mt.nrSpots, 2);
            for i = 1 : mt.nrSpots
                xy(i,1) = mt.spotList.get(i-1).getX;
                xy(i,2) = mt.spotList.get(i-1).getY;
            end           
        end  % getY
        
        % 
        function s = getS(mt)
            s = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                s(i,1) = mt.spotList.get(i-1).getSigma;
            end
        end
        
        function ch = getChannel(mt)
            ch = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                ch(i,1) = mt.spotList.get(i-1).getChannel;
            end
        end
        
        function f = getFrame(mt)
            f = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                f(i,1) = mt.spotList.get(i-1).getFrame;
            end
        end
        
        function p = getPos(mt)
            p = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                p(i,1) = mt.spotList.get(i-1).getPos;
            end
        end
        
        function s = getSlice(mt)
            s = zeros(mt.nrSpots, 1);
            for i = 1 : mt.nrSpots
                s(i,1) = mt.spotList.get(i-1).getSlice;
            end
        end
        
        
    end  %methods
        
end

