// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSFProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TSFProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TSF {

namespace {

const ::google::protobuf::Descriptor* FluorophoreType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FluorophoreType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROI_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpotList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpotList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FitMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ThetaUnits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IntensityUnits_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationUnits_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_TSFProto_2eproto() {
  protobuf_AddDesc_TSFProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TSFProto.proto");
  GOOGLE_CHECK(file != NULL);
  FluorophoreType_descriptor_ = file->message_type(0);
  static const int FluorophoreType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluorophoreType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluorophoreType, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluorophoreType, is_fiducial_),
  };
  FluorophoreType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FluorophoreType_descriptor_,
      FluorophoreType::default_instance_,
      FluorophoreType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluorophoreType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluorophoreType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FluorophoreType));
  ROI_descriptor_ = file->message_type(1);
  static const int ROI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, x_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, y_width_),
  };
  ROI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROI_descriptor_,
      ROI::default_instance_,
      ROI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROI));
  SpotList_descriptor_ = file->message_type(2);
  static const int SpotList_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, application_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_pixels_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_pixels_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, pixel_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_spots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, box_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, nr_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, fluorophore_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, location_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, intensity_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, theta_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, fit_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, is_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, ecf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, qe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, roi_),
  };
  SpotList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpotList_descriptor_,
      SpotList::default_instance_,
      SpotList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpotList, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpotList));
  Spot_descriptor_ = file->message_type(3);
  static const int Spot_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, molecule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, slice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, fluorophore_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, cluster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, location_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, intensity_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, background_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, x_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, y_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, z_original_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, x_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, y_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, z_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, x_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, y_position_),
  };
  Spot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spot_descriptor_,
      Spot::default_instance_,
      Spot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spot, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spot));
  FitMode_descriptor_ = file->enum_type(0);
  ThetaUnits_descriptor_ = file->enum_type(1);
  IntensityUnits_descriptor_ = file->enum_type(2);
  LocationUnits_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TSFProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FluorophoreType_descriptor_, &FluorophoreType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROI_descriptor_, &ROI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpotList_descriptor_, &SpotList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spot_descriptor_, &Spot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TSFProto_2eproto() {
  delete FluorophoreType::default_instance_;
  delete FluorophoreType_reflection_;
  delete ROI::default_instance_;
  delete ROI_reflection_;
  delete SpotList::default_instance_;
  delete SpotList_reflection_;
  delete Spot::default_instance_;
  delete Spot_reflection_;
}

void protobuf_AddDesc_TSFProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TSFProto.proto\022\003TSF\"G\n\017FluorophoreType"
    "\022\n\n\002id\030\001 \002(\005\022\023\n\013description\030\002 \001(\t\022\023\n\013is_"
    "fiducial\030\003 \001(\010\"=\n\003ROI\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
    "\002(\005\022\017\n\007x_width\030\003 \002(\005\022\017\n\007y_width\030\004 \002(\005\"\241\004"
    "\n\010SpotList\022\031\n\016application_id\030\001 \002(\005:\0011\022\014\n"
    "\004name\030\002 \001(\t\022\020\n\010filepath\030\003 \001(\t\022\013\n\003uid\030\004 \001"
    "(\003\022\023\n\013nr_pixels_x\030\005 \001(\005\022\023\n\013nr_pixels_y\030\006"
    " \001(\005\022\022\n\npixel_size\030\007 \001(\002\022\020\n\010nr_spots\030\010 \001"
    "(\003\022\020\n\010box_size\030\021 \001(\005\022\023\n\013nr_channels\030\022 \001("
    "\005\022\021\n\tnr_frames\030\023 \001(\005\022\021\n\tnr_slices\030\024 \001(\005\022"
    "\016\n\006nr_pos\030\025 \001(\005\022/\n\021fluorophore_types\030\032 \003"
    "(\0132\024.TSF.FluorophoreType\022*\n\016location_uni"
    "ts\030\026 \001(\0162\022.TSF.LocationUnits\022,\n\017intensit"
    "y_units\030\027 \001(\0162\023.TSF.IntensityUnits\022$\n\013th"
    "eta_units\030\033 \001(\0162\017.TSF.ThetaUnits\022\036\n\010fit_"
    "mode\030\030 \001(\0162\014.TSF.FitMode\022\027\n\010is_track\030\031 \001"
    "(\010:\005false\022\013\n\003ecf\030\034 \003(\001\022\n\n\002qe\030\036 \003(\001\022\025\n\003ro"
    "i\030\035 \001(\0132\010.TSF.ROI*\006\010\334\013\020\200\020\"\365\003\n\004Spot\022\020\n\010mo"
    "lecule\030\001 \002(\005\022\017\n\007channel\030\002 \002(\005\022\r\n\005frame\030\003"
    " \002(\005\022\r\n\005slice\030\004 \001(\005\022\013\n\003pos\030\005 \001(\005\022\030\n\020fluo"
    "rophore_type\030\023 \001(\005\022\017\n\007cluster\030\024 \001(\005\022*\n\016l"
    "ocation_units\030\021 \001(\0162\022.TSF.LocationUnits\022"
    "\t\n\001x\030\007 \002(\002\022\t\n\001y\030\010 \002(\002\022\t\n\001z\030\t \001(\002\022,\n\017inte"
    "nsity_units\030\022 \001(\0162\023.TSF.IntensityUnits\022\021"
    "\n\tintensity\030\n \002(\002\022\022\n\nbackground\030\013 \001(\002\022\r\n"
    "\005width\030\014 \001(\002\022\t\n\001a\030\r \001(\002\022\r\n\005theta\030\016 \001(\002\022\022"
    "\n\nx_original\030e \001(\002\022\022\n\ny_original\030f \001(\002\022\022"
    "\n\nz_original\030g \001(\002\022\023\n\013x_precision\030h \001(\002\022"
    "\023\n\013y_precision\030i \001(\002\022\023\n\013z_precision\030j \001("
    "\002\022\022\n\nx_position\030k \001(\005\022\022\n\ny_position\030l \001("
    "\005*\006\010\334\013\020\200\020*8\n\007FitMode\022\013\n\007ONEAXIS\020\000\022\013\n\007TWO"
    "AXIS\020\001\022\023\n\017TWOAXISANDTHETA\020\002*&\n\nThetaUnit"
    "s\022\013\n\007DEGREES\020\000\022\013\n\007RADIANS\020\001*)\n\016Intensity"
    "Units\022\n\n\006COUNTS\020\000\022\013\n\007PHOTONS\020\001*+\n\rLocati"
    "onUnits\022\006\n\002NM\020\000\022\006\n\002UM\020\001\022\n\n\006PIXELS\020\002B!\n\014e"
    "du.ucsf.tsfB\021TaggedSpotsProtos", 1430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TSFProto.proto", &protobuf_RegisterTypes);
  FluorophoreType::default_instance_ = new FluorophoreType();
  ROI::default_instance_ = new ROI();
  SpotList::default_instance_ = new SpotList();
  Spot::default_instance_ = new Spot();
  FluorophoreType::default_instance_->InitAsDefaultInstance();
  ROI::default_instance_->InitAsDefaultInstance();
  SpotList::default_instance_->InitAsDefaultInstance();
  Spot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TSFProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TSFProto_2eproto {
  StaticDescriptorInitializer_TSFProto_2eproto() {
    protobuf_AddDesc_TSFProto_2eproto();
  }
} static_descriptor_initializer_TSFProto_2eproto_;
const ::google::protobuf::EnumDescriptor* FitMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FitMode_descriptor_;
}
bool FitMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ThetaUnits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThetaUnits_descriptor_;
}
bool ThetaUnits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IntensityUnits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntensityUnits_descriptor_;
}
bool IntensityUnits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocationUnits_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationUnits_descriptor_;
}
bool LocationUnits_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FluorophoreType::kIdFieldNumber;
const int FluorophoreType::kDescriptionFieldNumber;
const int FluorophoreType::kIsFiducialFieldNumber;
#endif  // !_MSC_VER

FluorophoreType::FluorophoreType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FluorophoreType::InitAsDefaultInstance() {
}

FluorophoreType::FluorophoreType(const FluorophoreType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FluorophoreType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_fiducial_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FluorophoreType::~FluorophoreType() {
  SharedDtor();
}

void FluorophoreType::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void FluorophoreType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FluorophoreType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FluorophoreType_descriptor_;
}

const FluorophoreType& FluorophoreType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSFProto_2eproto();
  return *default_instance_;
}

FluorophoreType* FluorophoreType::default_instance_ = NULL;

FluorophoreType* FluorophoreType::New() const {
  return new FluorophoreType;
}

void FluorophoreType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    is_fiducial_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FluorophoreType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_fiducial;
        break;
      }

      // optional bool is_fiducial = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fiducial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fiducial_)));
          set_has_is_fiducial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FluorophoreType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional bool is_fiducial = 3;
  if (has_is_fiducial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fiducial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FluorophoreType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional bool is_fiducial = 3;
  if (has_is_fiducial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fiducial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FluorophoreType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional bool is_fiducial = 3;
    if (has_is_fiducial()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FluorophoreType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FluorophoreType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FluorophoreType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FluorophoreType::MergeFrom(const FluorophoreType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_is_fiducial()) {
      set_is_fiducial(from.is_fiducial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FluorophoreType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluorophoreType::CopyFrom(const FluorophoreType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluorophoreType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FluorophoreType::Swap(FluorophoreType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(is_fiducial_, other->is_fiducial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FluorophoreType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FluorophoreType_descriptor_;
  metadata.reflection = FluorophoreType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROI::kXFieldNumber;
const int ROI::kYFieldNumber;
const int ROI::kXWidthFieldNumber;
const int ROI::kYWidthFieldNumber;
#endif  // !_MSC_VER

ROI::ROI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROI::InitAsDefaultInstance() {
}

ROI::ROI(const ROI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROI::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  x_width_ = 0;
  y_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROI::~ROI() {
  SharedDtor();
}

void ROI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROI_descriptor_;
}

const ROI& ROI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSFProto_2eproto();
  return *default_instance_;
}

ROI* ROI::default_instance_ = NULL;

ROI* ROI::New() const {
  return new ROI;
}

void ROI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    x_width_ = 0;
    y_width_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x_width;
        break;
      }

      // required int32 x_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_width_)));
          set_has_x_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y_width;
        break;
      }

      // required int32 y_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_width_)));
          set_has_y_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 x_width = 3;
  if (has_x_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x_width(), output);
  }

  // required int32 y_width = 4;
  if (has_y_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y_width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 x_width = 3;
  if (has_x_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x_width(), target);
  }

  // required int32 y_width = 4;
  if (has_y_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y_width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 x_width = 3;
    if (has_x_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_width());
    }

    // required int32 y_width = 4;
    if (has_y_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROI::MergeFrom(const ROI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_x_width()) {
      set_x_width(from.x_width());
    }
    if (from.has_y_width()) {
      set_y_width(from.y_width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROI::CopyFrom(const ROI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ROI::Swap(ROI* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(x_width_, other->x_width_);
    std::swap(y_width_, other->y_width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROI_descriptor_;
  metadata.reflection = ROI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpotList::kApplicationIdFieldNumber;
const int SpotList::kNameFieldNumber;
const int SpotList::kFilepathFieldNumber;
const int SpotList::kUidFieldNumber;
const int SpotList::kNrPixelsXFieldNumber;
const int SpotList::kNrPixelsYFieldNumber;
const int SpotList::kPixelSizeFieldNumber;
const int SpotList::kNrSpotsFieldNumber;
const int SpotList::kBoxSizeFieldNumber;
const int SpotList::kNrChannelsFieldNumber;
const int SpotList::kNrFramesFieldNumber;
const int SpotList::kNrSlicesFieldNumber;
const int SpotList::kNrPosFieldNumber;
const int SpotList::kFluorophoreTypesFieldNumber;
const int SpotList::kLocationUnitsFieldNumber;
const int SpotList::kIntensityUnitsFieldNumber;
const int SpotList::kThetaUnitsFieldNumber;
const int SpotList::kFitModeFieldNumber;
const int SpotList::kIsTrackFieldNumber;
const int SpotList::kEcfFieldNumber;
const int SpotList::kQeFieldNumber;
const int SpotList::kRoiFieldNumber;
#endif  // !_MSC_VER

SpotList::SpotList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpotList::InitAsDefaultInstance() {
  roi_ = const_cast< ::TSF::ROI*>(&::TSF::ROI::default_instance());
}

SpotList::SpotList(const SpotList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpotList::SharedCtor() {
  _cached_size_ = 0;
  application_id_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = GOOGLE_LONGLONG(0);
  nr_pixels_x_ = 0;
  nr_pixels_y_ = 0;
  pixel_size_ = 0;
  nr_spots_ = GOOGLE_LONGLONG(0);
  box_size_ = 0;
  nr_channels_ = 0;
  nr_frames_ = 0;
  nr_slices_ = 0;
  nr_pos_ = 0;
  location_units_ = 0;
  intensity_units_ = 0;
  theta_units_ = 0;
  fit_mode_ = 0;
  is_track_ = false;
  roi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpotList::~SpotList() {
  SharedDtor();
}

void SpotList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (this != default_instance_) {
    delete roi_;
  }
}

void SpotList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpotList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpotList_descriptor_;
}

const SpotList& SpotList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSFProto_2eproto();
  return *default_instance_;
}

SpotList* SpotList::default_instance_ = NULL;

SpotList* SpotList::New() const {
  return new SpotList;
}

void SpotList::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    application_id_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    uid_ = GOOGLE_LONGLONG(0);
    nr_pixels_x_ = 0;
    nr_pixels_y_ = 0;
    pixel_size_ = 0;
    nr_spots_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    box_size_ = 0;
    nr_channels_ = 0;
    nr_frames_ = 0;
    nr_slices_ = 0;
    nr_pos_ = 0;
    location_units_ = 0;
    intensity_units_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    theta_units_ = 0;
    fit_mode_ = 0;
    is_track_ = false;
    if (has_roi()) {
      if (roi_ != NULL) roi_->::TSF::ROI::Clear();
    }
  }
  fluorophore_types_.Clear();
  ecf_.Clear();
  qe_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpotList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 application_id = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_id_)));
          set_has_application_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filepath;
        break;
      }

      // optional string filepath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filepath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int64 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nr_pixels_x;
        break;
      }

      // optional int32 nr_pixels_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_pixels_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_pixels_x_)));
          set_has_nr_pixels_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nr_pixels_y;
        break;
      }

      // optional int32 nr_pixels_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_pixels_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_pixels_y_)));
          set_has_nr_pixels_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_pixel_size;
        break;
      }

      // optional float pixel_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pixel_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_size_)));
          set_has_pixel_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nr_spots;
        break;
      }

      // optional int64 nr_spots = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_spots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nr_spots_)));
          set_has_nr_spots();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_box_size;
        break;
      }

      // optional int32 box_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_size_)));
          set_has_box_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nr_channels;
        break;
      }

      // optional int32 nr_channels = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_channels_)));
          set_has_nr_channels();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nr_frames;
        break;
      }

      // optional int32 nr_frames = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_frames_)));
          set_has_nr_frames();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_nr_slices;
        break;
      }

      // optional int32 nr_slices = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_slices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_slices_)));
          set_has_nr_slices();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_nr_pos;
        break;
      }

      // optional int32 nr_pos = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nr_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nr_pos_)));
          set_has_nr_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_location_units;
        break;
      }

      // optional .TSF.LocationUnits location_units = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::LocationUnits_IsValid(value)) {
            set_location_units(static_cast< ::TSF::LocationUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_intensity_units;
        break;
      }

      // optional .TSF.IntensityUnits intensity_units = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensity_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::IntensityUnits_IsValid(value)) {
            set_intensity_units(static_cast< ::TSF::IntensityUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_fit_mode;
        break;
      }

      // optional .TSF.FitMode fit_mode = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fit_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::FitMode_IsValid(value)) {
            set_fit_mode(static_cast< ::TSF::FitMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_is_track;
        break;
      }

      // optional bool is_track = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_track:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_track_)));
          set_has_is_track();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fluorophore_types;
        break;
      }

      // repeated .TSF.FluorophoreType fluorophore_types = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fluorophore_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fluorophore_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_fluorophore_types;
        if (input->ExpectTag(216)) goto parse_theta_units;
        break;
      }

      // optional .TSF.ThetaUnits theta_units = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_theta_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::ThetaUnits_IsValid(value)) {
            set_theta_units(static_cast< ::TSF::ThetaUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ecf;
        break;
      }

      // repeated double ecf = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ecf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 225, input, this->mutable_ecf())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_ecf())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ecf;
        if (input->ExpectTag(234)) goto parse_roi;
        break;
      }

      // optional .TSF.ROI roi = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_qe;
        break;
      }

      // repeated double qe = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_qe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 241, input, this->mutable_qe())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_qe())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_qe;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((12000u <= tag && tag < 16384u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpotList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 application_id = 1 [default = 1];
  if (has_application_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->application_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string filepath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filepath(), output);
  }

  // optional int64 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->uid(), output);
  }

  // optional int32 nr_pixels_x = 5;
  if (has_nr_pixels_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nr_pixels_x(), output);
  }

  // optional int32 nr_pixels_y = 6;
  if (has_nr_pixels_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nr_pixels_y(), output);
  }

  // optional float pixel_size = 7;
  if (has_pixel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_size(), output);
  }

  // optional int64 nr_spots = 8;
  if (has_nr_spots()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->nr_spots(), output);
  }

  // optional int32 box_size = 17;
  if (has_box_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->box_size(), output);
  }

  // optional int32 nr_channels = 18;
  if (has_nr_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->nr_channels(), output);
  }

  // optional int32 nr_frames = 19;
  if (has_nr_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nr_frames(), output);
  }

  // optional int32 nr_slices = 20;
  if (has_nr_slices()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->nr_slices(), output);
  }

  // optional int32 nr_pos = 21;
  if (has_nr_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->nr_pos(), output);
  }

  // optional .TSF.LocationUnits location_units = 22;
  if (has_location_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->location_units(), output);
  }

  // optional .TSF.IntensityUnits intensity_units = 23;
  if (has_intensity_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->intensity_units(), output);
  }

  // optional .TSF.FitMode fit_mode = 24;
  if (has_fit_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->fit_mode(), output);
  }

  // optional bool is_track = 25 [default = false];
  if (has_is_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_track(), output);
  }

  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  for (int i = 0; i < this->fluorophore_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->fluorophore_types(i), output);
  }

  // optional .TSF.ThetaUnits theta_units = 27;
  if (has_theta_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->theta_units(), output);
  }

  // repeated double ecf = 28;
  for (int i = 0; i < this->ecf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      28, this->ecf(i), output);
  }

  // optional .TSF.ROI roi = 29;
  if (has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->roi(), output);
  }

  // repeated double qe = 30;
  for (int i = 0; i < this->qe_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      30, this->qe(i), output);
  }

  // Extension range [1500, 2048)
  _extensions_.SerializeWithCachedSizes(
      1500, 2048, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpotList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 application_id = 1 [default = 1];
  if (has_application_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->application_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string filepath = 3;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }

  // optional int64 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->uid(), target);
  }

  // optional int32 nr_pixels_x = 5;
  if (has_nr_pixels_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nr_pixels_x(), target);
  }

  // optional int32 nr_pixels_y = 6;
  if (has_nr_pixels_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nr_pixels_y(), target);
  }

  // optional float pixel_size = 7;
  if (has_pixel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_size(), target);
  }

  // optional int64 nr_spots = 8;
  if (has_nr_spots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->nr_spots(), target);
  }

  // optional int32 box_size = 17;
  if (has_box_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->box_size(), target);
  }

  // optional int32 nr_channels = 18;
  if (has_nr_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->nr_channels(), target);
  }

  // optional int32 nr_frames = 19;
  if (has_nr_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nr_frames(), target);
  }

  // optional int32 nr_slices = 20;
  if (has_nr_slices()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->nr_slices(), target);
  }

  // optional int32 nr_pos = 21;
  if (has_nr_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->nr_pos(), target);
  }

  // optional .TSF.LocationUnits location_units = 22;
  if (has_location_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->location_units(), target);
  }

  // optional .TSF.IntensityUnits intensity_units = 23;
  if (has_intensity_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->intensity_units(), target);
  }

  // optional .TSF.FitMode fit_mode = 24;
  if (has_fit_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->fit_mode(), target);
  }

  // optional bool is_track = 25 [default = false];
  if (has_is_track()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_track(), target);
  }

  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  for (int i = 0; i < this->fluorophore_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->fluorophore_types(i), target);
  }

  // optional .TSF.ThetaUnits theta_units = 27;
  if (has_theta_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->theta_units(), target);
  }

  // repeated double ecf = 28;
  for (int i = 0; i < this->ecf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(28, this->ecf(i), target);
  }

  // optional .TSF.ROI roi = 29;
  if (has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->roi(), target);
  }

  // repeated double qe = 30;
  for (int i = 0; i < this->qe_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(30, this->qe(i), target);
  }

  // Extension range [1500, 2048)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1500, 2048, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpotList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 application_id = 1 [default = 1];
    if (has_application_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string filepath = 3;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // optional int64 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 nr_pixels_x = 5;
    if (has_nr_pixels_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_pixels_x());
    }

    // optional int32 nr_pixels_y = 6;
    if (has_nr_pixels_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_pixels_y());
    }

    // optional float pixel_size = 7;
    if (has_pixel_size()) {
      total_size += 1 + 4;
    }

    // optional int64 nr_spots = 8;
    if (has_nr_spots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nr_spots());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 box_size = 17;
    if (has_box_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->box_size());
    }

    // optional int32 nr_channels = 18;
    if (has_nr_channels()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_channels());
    }

    // optional int32 nr_frames = 19;
    if (has_nr_frames()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_frames());
    }

    // optional int32 nr_slices = 20;
    if (has_nr_slices()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_slices());
    }

    // optional int32 nr_pos = 21;
    if (has_nr_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nr_pos());
    }

    // optional .TSF.LocationUnits location_units = 22;
    if (has_location_units()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->location_units());
    }

    // optional .TSF.IntensityUnits intensity_units = 23;
    if (has_intensity_units()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intensity_units());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TSF.ThetaUnits theta_units = 27;
    if (has_theta_units()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->theta_units());
    }

    // optional .TSF.FitMode fit_mode = 24;
    if (has_fit_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fit_mode());
    }

    // optional bool is_track = 25 [default = false];
    if (has_is_track()) {
      total_size += 2 + 1;
    }

    // optional .TSF.ROI roi = 29;
    if (has_roi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roi());
    }

  }
  // repeated .TSF.FluorophoreType fluorophore_types = 26;
  total_size += 2 * this->fluorophore_types_size();
  for (int i = 0; i < this->fluorophore_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fluorophore_types(i));
  }

  // repeated double ecf = 28;
  {
    int data_size = 0;
    data_size = 8 * this->ecf_size();
    total_size += 2 * this->ecf_size() + data_size;
  }

  // repeated double qe = 30;
  {
    int data_size = 0;
    data_size = 8 * this->qe_size();
    total_size += 2 * this->qe_size() + data_size;
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpotList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpotList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpotList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpotList::MergeFrom(const SpotList& from) {
  GOOGLE_CHECK_NE(&from, this);
  fluorophore_types_.MergeFrom(from.fluorophore_types_);
  ecf_.MergeFrom(from.ecf_);
  qe_.MergeFrom(from.qe_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_id()) {
      set_application_id(from.application_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nr_pixels_x()) {
      set_nr_pixels_x(from.nr_pixels_x());
    }
    if (from.has_nr_pixels_y()) {
      set_nr_pixels_y(from.nr_pixels_y());
    }
    if (from.has_pixel_size()) {
      set_pixel_size(from.pixel_size());
    }
    if (from.has_nr_spots()) {
      set_nr_spots(from.nr_spots());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_box_size()) {
      set_box_size(from.box_size());
    }
    if (from.has_nr_channels()) {
      set_nr_channels(from.nr_channels());
    }
    if (from.has_nr_frames()) {
      set_nr_frames(from.nr_frames());
    }
    if (from.has_nr_slices()) {
      set_nr_slices(from.nr_slices());
    }
    if (from.has_nr_pos()) {
      set_nr_pos(from.nr_pos());
    }
    if (from.has_location_units()) {
      set_location_units(from.location_units());
    }
    if (from.has_intensity_units()) {
      set_intensity_units(from.intensity_units());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_theta_units()) {
      set_theta_units(from.theta_units());
    }
    if (from.has_fit_mode()) {
      set_fit_mode(from.fit_mode());
    }
    if (from.has_is_track()) {
      set_is_track(from.is_track());
    }
    if (from.has_roi()) {
      mutable_roi()->::TSF::ROI::MergeFrom(from.roi());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpotList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotList::CopyFrom(const SpotList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < fluorophore_types_size(); i++) {
    if (!this->fluorophore_types(i).IsInitialized()) return false;
  }
  if (has_roi()) {
    if (!this->roi().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void SpotList::Swap(SpotList* other) {
  if (other != this) {
    std::swap(application_id_, other->application_id_);
    std::swap(name_, other->name_);
    std::swap(filepath_, other->filepath_);
    std::swap(uid_, other->uid_);
    std::swap(nr_pixels_x_, other->nr_pixels_x_);
    std::swap(nr_pixels_y_, other->nr_pixels_y_);
    std::swap(pixel_size_, other->pixel_size_);
    std::swap(nr_spots_, other->nr_spots_);
    std::swap(box_size_, other->box_size_);
    std::swap(nr_channels_, other->nr_channels_);
    std::swap(nr_frames_, other->nr_frames_);
    std::swap(nr_slices_, other->nr_slices_);
    std::swap(nr_pos_, other->nr_pos_);
    fluorophore_types_.Swap(&other->fluorophore_types_);
    std::swap(location_units_, other->location_units_);
    std::swap(intensity_units_, other->intensity_units_);
    std::swap(theta_units_, other->theta_units_);
    std::swap(fit_mode_, other->fit_mode_);
    std::swap(is_track_, other->is_track_);
    ecf_.Swap(&other->ecf_);
    qe_.Swap(&other->qe_);
    std::swap(roi_, other->roi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata SpotList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpotList_descriptor_;
  metadata.reflection = SpotList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spot::kMoleculeFieldNumber;
const int Spot::kChannelFieldNumber;
const int Spot::kFrameFieldNumber;
const int Spot::kSliceFieldNumber;
const int Spot::kPosFieldNumber;
const int Spot::kFluorophoreTypeFieldNumber;
const int Spot::kClusterFieldNumber;
const int Spot::kLocationUnitsFieldNumber;
const int Spot::kXFieldNumber;
const int Spot::kYFieldNumber;
const int Spot::kZFieldNumber;
const int Spot::kIntensityUnitsFieldNumber;
const int Spot::kIntensityFieldNumber;
const int Spot::kBackgroundFieldNumber;
const int Spot::kWidthFieldNumber;
const int Spot::kAFieldNumber;
const int Spot::kThetaFieldNumber;
const int Spot::kXOriginalFieldNumber;
const int Spot::kYOriginalFieldNumber;
const int Spot::kZOriginalFieldNumber;
const int Spot::kXPrecisionFieldNumber;
const int Spot::kYPrecisionFieldNumber;
const int Spot::kZPrecisionFieldNumber;
const int Spot::kXPositionFieldNumber;
const int Spot::kYPositionFieldNumber;
#endif  // !_MSC_VER

Spot::Spot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spot::InitAsDefaultInstance() {
}

Spot::Spot(const Spot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spot::SharedCtor() {
  _cached_size_ = 0;
  molecule_ = 0;
  channel_ = 0;
  frame_ = 0;
  slice_ = 0;
  pos_ = 0;
  fluorophore_type_ = 0;
  cluster_ = 0;
  location_units_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  intensity_units_ = 0;
  intensity_ = 0;
  background_ = 0;
  width_ = 0;
  a_ = 0;
  theta_ = 0;
  x_original_ = 0;
  y_original_ = 0;
  z_original_ = 0;
  x_precision_ = 0;
  y_precision_ = 0;
  z_precision_ = 0;
  x_position_ = 0;
  y_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spot::~Spot() {
  SharedDtor();
}

void Spot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Spot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spot_descriptor_;
}

const Spot& Spot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TSFProto_2eproto();
  return *default_instance_;
}

Spot* Spot::default_instance_ = NULL;

Spot* Spot::New() const {
  return new Spot;
}

void Spot::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    molecule_ = 0;
    channel_ = 0;
    frame_ = 0;
    slice_ = 0;
    pos_ = 0;
    fluorophore_type_ = 0;
    cluster_ = 0;
    location_units_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    intensity_units_ = 0;
    intensity_ = 0;
    background_ = 0;
    width_ = 0;
    a_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    theta_ = 0;
    x_original_ = 0;
    y_original_ = 0;
    z_original_ = 0;
    x_precision_ = 0;
    y_precision_ = 0;
    z_precision_ = 0;
    x_position_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    y_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 molecule = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &molecule_)));
          set_has_molecule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }

      // required int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frame;
        break;
      }

      // required int32 frame = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slice;
        break;
      }

      // optional int32 slice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slice_)));
          set_has_slice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional int32 pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_x;
        break;
      }

      // required float x = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_y;
        break;
      }

      // required float y = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_z;
        break;
      }

      // optional float z = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_intensity;
        break;
      }

      // required float intensity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_background;
        break;
      }

      // optional float background = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_background:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &background_)));
          set_has_background();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_width;
        break;
      }

      // optional float width = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_a;
        break;
      }

      // optional float a = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_theta;
        break;
      }

      // optional float theta = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_location_units;
        break;
      }

      // optional .TSF.LocationUnits location_units = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_location_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::LocationUnits_IsValid(value)) {
            set_location_units(static_cast< ::TSF::LocationUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_intensity_units;
        break;
      }

      // optional .TSF.IntensityUnits intensity_units = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensity_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TSF::IntensityUnits_IsValid(value)) {
            set_intensity_units(static_cast< ::TSF::IntensityUnits >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fluorophore_type;
        break;
      }

      // optional int32 fluorophore_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fluorophore_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fluorophore_type_)));
          set_has_fluorophore_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_cluster;
        break;
      }

      // optional int32 cluster = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_)));
          set_has_cluster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(813)) goto parse_x_original;
        break;
      }

      // optional float x_original = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_original_)));
          set_has_x_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(821)) goto parse_y_original;
        break;
      }

      // optional float y_original = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_original_)));
          set_has_y_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(829)) goto parse_z_original;
        break;
      }

      // optional float z_original = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z_original:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_original_)));
          set_has_z_original();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(837)) goto parse_x_precision;
        break;
      }

      // optional float x_precision = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_precision_)));
          set_has_x_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(845)) goto parse_y_precision;
        break;
      }

      // optional float y_precision = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_precision_)));
          set_has_y_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(853)) goto parse_z_precision;
        break;
      }

      // optional float z_precision = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_precision_)));
          set_has_z_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_x_position;
        break;
      }

      // optional int32 x_position = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_position_)));
          set_has_x_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_y_position;
        break;
      }

      // optional int32 y_position = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_position_)));
          set_has_y_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((12000u <= tag && tag < 16384u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 molecule = 1;
  if (has_molecule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->molecule(), output);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // required int32 frame = 3;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame(), output);
  }

  // optional int32 slice = 4;
  if (has_slice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slice(), output);
  }

  // optional int32 pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }

  // required float x = 7;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // required float y = 8;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional float z = 9;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->z(), output);
  }

  // required float intensity = 10;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->intensity(), output);
  }

  // optional float background = 11;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->background(), output);
  }

  // optional float width = 12;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->width(), output);
  }

  // optional float a = 13;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->a(), output);
  }

  // optional float theta = 14;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->theta(), output);
  }

  // optional .TSF.LocationUnits location_units = 17;
  if (has_location_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->location_units(), output);
  }

  // optional .TSF.IntensityUnits intensity_units = 18;
  if (has_intensity_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->intensity_units(), output);
  }

  // optional int32 fluorophore_type = 19;
  if (has_fluorophore_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fluorophore_type(), output);
  }

  // optional int32 cluster = 20;
  if (has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->cluster(), output);
  }

  // optional float x_original = 101;
  if (has_x_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(101, this->x_original(), output);
  }

  // optional float y_original = 102;
  if (has_y_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->y_original(), output);
  }

  // optional float z_original = 103;
  if (has_z_original()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(103, this->z_original(), output);
  }

  // optional float x_precision = 104;
  if (has_x_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(104, this->x_precision(), output);
  }

  // optional float y_precision = 105;
  if (has_y_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(105, this->y_precision(), output);
  }

  // optional float z_precision = 106;
  if (has_z_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(106, this->z_precision(), output);
  }

  // optional int32 x_position = 107;
  if (has_x_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->x_position(), output);
  }

  // optional int32 y_position = 108;
  if (has_y_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(108, this->y_position(), output);
  }

  // Extension range [1500, 2048)
  _extensions_.SerializeWithCachedSizes(
      1500, 2048, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 molecule = 1;
  if (has_molecule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->molecule(), target);
  }

  // required int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // required int32 frame = 3;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame(), target);
  }

  // optional int32 slice = 4;
  if (has_slice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slice(), target);
  }

  // optional int32 pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }

  // required float x = 7;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // required float y = 8;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional float z = 9;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->z(), target);
  }

  // required float intensity = 10;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->intensity(), target);
  }

  // optional float background = 11;
  if (has_background()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->background(), target);
  }

  // optional float width = 12;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->width(), target);
  }

  // optional float a = 13;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->a(), target);
  }

  // optional float theta = 14;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->theta(), target);
  }

  // optional .TSF.LocationUnits location_units = 17;
  if (has_location_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->location_units(), target);
  }

  // optional .TSF.IntensityUnits intensity_units = 18;
  if (has_intensity_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->intensity_units(), target);
  }

  // optional int32 fluorophore_type = 19;
  if (has_fluorophore_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fluorophore_type(), target);
  }

  // optional int32 cluster = 20;
  if (has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->cluster(), target);
  }

  // optional float x_original = 101;
  if (has_x_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(101, this->x_original(), target);
  }

  // optional float y_original = 102;
  if (has_y_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(102, this->y_original(), target);
  }

  // optional float z_original = 103;
  if (has_z_original()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(103, this->z_original(), target);
  }

  // optional float x_precision = 104;
  if (has_x_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(104, this->x_precision(), target);
  }

  // optional float y_precision = 105;
  if (has_y_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(105, this->y_precision(), target);
  }

  // optional float z_precision = 106;
  if (has_z_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(106, this->z_precision(), target);
  }

  // optional int32 x_position = 107;
  if (has_x_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->x_position(), target);
  }

  // optional int32 y_position = 108;
  if (has_y_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(108, this->y_position(), target);
  }

  // Extension range [1500, 2048)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1500, 2048, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 molecule = 1;
    if (has_molecule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->molecule());
    }

    // required int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required int32 frame = 3;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame());
    }

    // optional int32 slice = 4;
    if (has_slice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slice());
    }

    // optional int32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional int32 fluorophore_type = 19;
    if (has_fluorophore_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fluorophore_type());
    }

    // optional int32 cluster = 20;
    if (has_cluster()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster());
    }

    // optional .TSF.LocationUnits location_units = 17;
    if (has_location_units()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->location_units());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float x = 7;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 8;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 9;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional .TSF.IntensityUnits intensity_units = 18;
    if (has_intensity_units()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intensity_units());
    }

    // required float intensity = 10;
    if (has_intensity()) {
      total_size += 1 + 4;
    }

    // optional float background = 11;
    if (has_background()) {
      total_size += 1 + 4;
    }

    // optional float width = 12;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float a = 13;
    if (has_a()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float theta = 14;
    if (has_theta()) {
      total_size += 1 + 4;
    }

    // optional float x_original = 101;
    if (has_x_original()) {
      total_size += 2 + 4;
    }

    // optional float y_original = 102;
    if (has_y_original()) {
      total_size += 2 + 4;
    }

    // optional float z_original = 103;
    if (has_z_original()) {
      total_size += 2 + 4;
    }

    // optional float x_precision = 104;
    if (has_x_precision()) {
      total_size += 2 + 4;
    }

    // optional float y_precision = 105;
    if (has_y_precision()) {
      total_size += 2 + 4;
    }

    // optional float z_precision = 106;
    if (has_z_precision()) {
      total_size += 2 + 4;
    }

    // optional int32 x_position = 107;
    if (has_x_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_position());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 y_position = 108;
    if (has_y_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_position());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spot::MergeFrom(const Spot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_molecule()) {
      set_molecule(from.molecule());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_slice()) {
      set_slice(from.slice());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_fluorophore_type()) {
      set_fluorophore_type(from.fluorophore_type());
    }
    if (from.has_cluster()) {
      set_cluster(from.cluster());
    }
    if (from.has_location_units()) {
      set_location_units(from.location_units());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_intensity_units()) {
      set_intensity_units(from.intensity_units());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_background()) {
      set_background(from.background());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_x_original()) {
      set_x_original(from.x_original());
    }
    if (from.has_y_original()) {
      set_y_original(from.y_original());
    }
    if (from.has_z_original()) {
      set_z_original(from.z_original());
    }
    if (from.has_x_precision()) {
      set_x_precision(from.x_precision());
    }
    if (from.has_y_precision()) {
      set_y_precision(from.y_precision());
    }
    if (from.has_z_precision()) {
      set_z_precision(from.z_precision());
    }
    if (from.has_x_position()) {
      set_x_position(from.x_position());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_y_position()) {
      set_y_position(from.y_position());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spot::CopyFrom(const Spot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001307) != 0x00001307) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Spot::Swap(Spot* other) {
  if (other != this) {
    std::swap(molecule_, other->molecule_);
    std::swap(channel_, other->channel_);
    std::swap(frame_, other->frame_);
    std::swap(slice_, other->slice_);
    std::swap(pos_, other->pos_);
    std::swap(fluorophore_type_, other->fluorophore_type_);
    std::swap(cluster_, other->cluster_);
    std::swap(location_units_, other->location_units_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(intensity_units_, other->intensity_units_);
    std::swap(intensity_, other->intensity_);
    std::swap(background_, other->background_);
    std::swap(width_, other->width_);
    std::swap(a_, other->a_);
    std::swap(theta_, other->theta_);
    std::swap(x_original_, other->x_original_);
    std::swap(y_original_, other->y_original_);
    std::swap(z_original_, other->z_original_);
    std::swap(x_precision_, other->x_precision_);
    std::swap(y_precision_, other->y_precision_);
    std::swap(z_precision_, other->z_precision_);
    std::swap(x_position_, other->x_position_);
    std::swap(y_position_, other->y_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Spot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spot_descriptor_;
  metadata.reflection = Spot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSF

// @@protoc_insertion_point(global_scope)
