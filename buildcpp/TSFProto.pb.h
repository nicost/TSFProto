// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSFProto.proto

#ifndef PROTOBUF_TSFProto_2eproto__INCLUDED
#define PROTOBUF_TSFProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace TSF {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TSFProto_2eproto();
void protobuf_AssignDesc_TSFProto_2eproto();
void protobuf_ShutdownFile_TSFProto_2eproto();

class SpotList;
class Spot;

enum FitMode {
  ONEAXIS = 0,
  TWOAXIS = 1,
  TWOAXISANDTHETA = 2
};
bool FitMode_IsValid(int value);
const FitMode FitMode_MIN = ONEAXIS;
const FitMode FitMode_MAX = TWOAXISANDTHETA;
const int FitMode_ARRAYSIZE = FitMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FitMode_descriptor();
inline const ::std::string& FitMode_Name(FitMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FitMode_descriptor(), value);
}
inline bool FitMode_Parse(
    const ::std::string& name, FitMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FitMode>(
    FitMode_descriptor(), name, value);
}
enum IntensityUnits {
  COUNTS = 0,
  PHOTONS = 1
};
bool IntensityUnits_IsValid(int value);
const IntensityUnits IntensityUnits_MIN = COUNTS;
const IntensityUnits IntensityUnits_MAX = PHOTONS;
const int IntensityUnits_ARRAYSIZE = IntensityUnits_MAX + 1;

const ::google::protobuf::EnumDescriptor* IntensityUnits_descriptor();
inline const ::std::string& IntensityUnits_Name(IntensityUnits value) {
  return ::google::protobuf::internal::NameOfEnum(
    IntensityUnits_descriptor(), value);
}
inline bool IntensityUnits_Parse(
    const ::std::string& name, IntensityUnits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IntensityUnits>(
    IntensityUnits_descriptor(), name, value);
}
enum LocationUnits {
  NM = 0,
  UM = 1,
  PIXELS = 2
};
bool LocationUnits_IsValid(int value);
const LocationUnits LocationUnits_MIN = NM;
const LocationUnits LocationUnits_MAX = PIXELS;
const int LocationUnits_ARRAYSIZE = LocationUnits_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocationUnits_descriptor();
inline const ::std::string& LocationUnits_Name(LocationUnits value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocationUnits_descriptor(), value);
}
inline bool LocationUnits_Parse(
    const ::std::string& name, LocationUnits* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocationUnits>(
    LocationUnits_descriptor(), name, value);
}
// ===================================================================

class SpotList : public ::google::protobuf::Message {
 public:
  SpotList();
  virtual ~SpotList();
  
  SpotList(const SpotList& from);
  
  inline SpotList& operator=(const SpotList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpotList& default_instance();
  
  void Swap(SpotList* other);
  
  // implements Message ----------------------------------------------
  
  SpotList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpotList& from);
  void MergeFrom(const SpotList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 application_id = 1 [default = 1];
  inline bool has_application_id() const;
  inline void clear_application_id();
  static const int kApplicationIdFieldNumber = 1;
  inline ::google::protobuf::int32 application_id() const;
  inline void set_application_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional string filepath = 3;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilepathFieldNumber = 3;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  
  // optional int64 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);
  
  // optional int32 nr_pixels_x = 5;
  inline bool has_nr_pixels_x() const;
  inline void clear_nr_pixels_x();
  static const int kNrPixelsXFieldNumber = 5;
  inline ::google::protobuf::int32 nr_pixels_x() const;
  inline void set_nr_pixels_x(::google::protobuf::int32 value);
  
  // optional int32 nr_pixels_y = 6;
  inline bool has_nr_pixels_y() const;
  inline void clear_nr_pixels_y();
  static const int kNrPixelsYFieldNumber = 6;
  inline ::google::protobuf::int32 nr_pixels_y() const;
  inline void set_nr_pixels_y(::google::protobuf::int32 value);
  
  // optional float pixel_size = 7;
  inline bool has_pixel_size() const;
  inline void clear_pixel_size();
  static const int kPixelSizeFieldNumber = 7;
  inline float pixel_size() const;
  inline void set_pixel_size(float value);
  
  // optional int64 nr_spots = 8;
  inline bool has_nr_spots() const;
  inline void clear_nr_spots();
  static const int kNrSpotsFieldNumber = 8;
  inline ::google::protobuf::int64 nr_spots() const;
  inline void set_nr_spots(::google::protobuf::int64 value);
  
  // optional int32 box_size = 17;
  inline bool has_box_size() const;
  inline void clear_box_size();
  static const int kBoxSizeFieldNumber = 17;
  inline ::google::protobuf::int32 box_size() const;
  inline void set_box_size(::google::protobuf::int32 value);
  
  // optional int32 nr_channels = 18;
  inline bool has_nr_channels() const;
  inline void clear_nr_channels();
  static const int kNrChannelsFieldNumber = 18;
  inline ::google::protobuf::int32 nr_channels() const;
  inline void set_nr_channels(::google::protobuf::int32 value);
  
  // optional int32 nr_frames = 19;
  inline bool has_nr_frames() const;
  inline void clear_nr_frames();
  static const int kNrFramesFieldNumber = 19;
  inline ::google::protobuf::int32 nr_frames() const;
  inline void set_nr_frames(::google::protobuf::int32 value);
  
  // optional int32 nr_slices = 20;
  inline bool has_nr_slices() const;
  inline void clear_nr_slices();
  static const int kNrSlicesFieldNumber = 20;
  inline ::google::protobuf::int32 nr_slices() const;
  inline void set_nr_slices(::google::protobuf::int32 value);
  
  // optional int32 nr_pos = 21;
  inline bool has_nr_pos() const;
  inline void clear_nr_pos();
  static const int kNrPosFieldNumber = 21;
  inline ::google::protobuf::int32 nr_pos() const;
  inline void set_nr_pos(::google::protobuf::int32 value);
  
  // optional .TSF.LocationUnits location_units = 22;
  inline bool has_location_units() const;
  inline void clear_location_units();
  static const int kLocationUnitsFieldNumber = 22;
  inline TSF::LocationUnits location_units() const;
  inline void set_location_units(TSF::LocationUnits value);
  
  // optional .TSF.IntensityUnits intensity_units = 23;
  inline bool has_intensity_units() const;
  inline void clear_intensity_units();
  static const int kIntensityUnitsFieldNumber = 23;
  inline TSF::IntensityUnits intensity_units() const;
  inline void set_intensity_units(TSF::IntensityUnits value);
  
  // optional .TSF.FitMode fit_mode = 24;
  inline bool has_fit_mode() const;
  inline void clear_fit_mode();
  static const int kFitModeFieldNumber = 24;
  inline TSF::FitMode fit_mode() const;
  inline void set_fit_mode(TSF::FitMode value);
  
  // optional bool is_track = 25 [default = false];
  inline bool has_is_track() const;
  inline void clear_is_track();
  static const int kIsTrackFieldNumber = 25;
  inline bool is_track() const;
  inline void set_is_track(bool value);
  
  // @@protoc_insertion_point(class_scope:TSF.SpotList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 application_id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* filepath_;
  static const ::std::string _default_filepath_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 nr_pixels_x_;
  ::google::protobuf::int32 nr_pixels_y_;
  float pixel_size_;
  ::google::protobuf::int64 nr_spots_;
  ::google::protobuf::int32 box_size_;
  ::google::protobuf::int32 nr_channels_;
  ::google::protobuf::int32 nr_frames_;
  ::google::protobuf::int32 nr_slices_;
  ::google::protobuf::int32 nr_pos_;
  int location_units_;
  int intensity_units_;
  int fit_mode_;
  bool is_track_;
  friend void  protobuf_AddDesc_TSFProto_2eproto();
  friend void protobuf_AssignDesc_TSFProto_2eproto();
  friend void protobuf_ShutdownFile_TSFProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SpotList* default_instance_;
};
// -------------------------------------------------------------------

class Spot : public ::google::protobuf::Message {
 public:
  Spot();
  virtual ~Spot();
  
  Spot(const Spot& from);
  
  inline Spot& operator=(const Spot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spot& default_instance();
  
  void Swap(Spot* other);
  
  // implements Message ----------------------------------------------
  
  Spot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spot& from);
  void MergeFrom(const Spot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 molecule = 1;
  inline bool has_molecule() const;
  inline void clear_molecule();
  static const int kMoleculeFieldNumber = 1;
  inline ::google::protobuf::int32 molecule() const;
  inline void set_molecule(::google::protobuf::int32 value);
  
  // required int32 channel = 2;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 2;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);
  
  // required int32 frame = 3;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3;
  inline ::google::protobuf::int32 frame() const;
  inline void set_frame(::google::protobuf::int32 value);
  
  // optional int32 slice = 4;
  inline bool has_slice() const;
  inline void clear_slice();
  static const int kSliceFieldNumber = 4;
  inline ::google::protobuf::int32 slice() const;
  inline void set_slice(::google::protobuf::int32 value);
  
  // optional int32 pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);
  
  // optional .TSF.LocationUnits location_units = 17;
  inline bool has_location_units() const;
  inline void clear_location_units();
  static const int kLocationUnitsFieldNumber = 17;
  inline TSF::LocationUnits location_units() const;
  inline void set_location_units(TSF::LocationUnits value);
  
  // required float x = 7;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 7;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 8;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 8;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 9;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 9;
  inline float z() const;
  inline void set_z(float value);
  
  // optional .TSF.IntensityUnits intensity_units = 18;
  inline bool has_intensity_units() const;
  inline void clear_intensity_units();
  static const int kIntensityUnitsFieldNumber = 18;
  inline TSF::IntensityUnits intensity_units() const;
  inline void set_intensity_units(TSF::IntensityUnits value);
  
  // required float intensity = 10;
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 10;
  inline float intensity() const;
  inline void set_intensity(float value);
  
  // optional float background = 11;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 11;
  inline float background() const;
  inline void set_background(float value);
  
  // optional float width = 12;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 12;
  inline float width() const;
  inline void set_width(float value);
  
  // optional float a = 13;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 13;
  inline float a() const;
  inline void set_a(float value);
  
  // optional float theta = 14;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 14;
  inline float theta() const;
  inline void set_theta(float value);
  
  // optional int32 flag = 6;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 6;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);
  
  // optional float x_original = 101;
  inline bool has_x_original() const;
  inline void clear_x_original();
  static const int kXOriginalFieldNumber = 101;
  inline float x_original() const;
  inline void set_x_original(float value);
  
  // optional float y_original = 102;
  inline bool has_y_original() const;
  inline void clear_y_original();
  static const int kYOriginalFieldNumber = 102;
  inline float y_original() const;
  inline void set_y_original(float value);
  
  // optional float z_original = 103;
  inline bool has_z_original() const;
  inline void clear_z_original();
  static const int kZOriginalFieldNumber = 103;
  inline float z_original() const;
  inline void set_z_original(float value);
  
  // optional float x_precision = 104;
  inline bool has_x_precision() const;
  inline void clear_x_precision();
  static const int kXPrecisionFieldNumber = 104;
  inline float x_precision() const;
  inline void set_x_precision(float value);
  
  // optional float y_precision = 105;
  inline bool has_y_precision() const;
  inline void clear_y_precision();
  static const int kYPrecisionFieldNumber = 105;
  inline float y_precision() const;
  inline void set_y_precision(float value);
  
  // optional float z_precision = 106;
  inline bool has_z_precision() const;
  inline void clear_z_precision();
  static const int kZPrecisionFieldNumber = 106;
  inline float z_precision() const;
  inline void set_z_precision(float value);
  
  // optional int32 x_position = 107;
  inline bool has_x_position() const;
  inline void clear_x_position();
  static const int kXPositionFieldNumber = 107;
  inline ::google::protobuf::int32 x_position() const;
  inline void set_x_position(::google::protobuf::int32 value);
  
  // optional int32 y_position = 108;
  inline bool has_y_position() const;
  inline void clear_y_position();
  static const int kYPositionFieldNumber = 108;
  inline ::google::protobuf::int32 y_position() const;
  inline void set_y_position(::google::protobuf::int32 value);
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Spot)
  // @@protoc_insertion_point(class_scope:TSF.Spot)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 molecule_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 frame_;
  ::google::protobuf::int32 slice_;
  ::google::protobuf::int32 pos_;
  int location_units_;
  float x_;
  float y_;
  float z_;
  int intensity_units_;
  float intensity_;
  float background_;
  float width_;
  float a_;
  float theta_;
  ::google::protobuf::int32 flag_;
  float x_original_;
  float y_original_;
  float z_original_;
  float x_precision_;
  float y_precision_;
  float z_precision_;
  ::google::protobuf::int32 x_position_;
  ::google::protobuf::int32 y_position_;
  friend void  protobuf_AddDesc_TSFProto_2eproto();
  friend void protobuf_AssignDesc_TSFProto_2eproto();
  friend void protobuf_ShutdownFile_TSFProto_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Spot* default_instance_;
};
// ===================================================================


// ===================================================================

// SpotList

// required int32 application_id = 1 [default = 1];
inline bool SpotList::has_application_id() const {
  return _has_bit(0);
}
inline void SpotList::clear_application_id() {
  application_id_ = 1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 SpotList::application_id() const {
  return application_id_;
}
inline void SpotList::set_application_id(::google::protobuf::int32 value) {
  _set_bit(0);
  application_id_ = value;
}

// optional string name = 2;
inline bool SpotList::has_name() const {
  return _has_bit(1);
}
inline void SpotList::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SpotList::name() const {
  return *name_;
}
inline void SpotList::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SpotList::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SpotList::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpotList::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional string filepath = 3;
inline bool SpotList::has_filepath() const {
  return _has_bit(2);
}
inline void SpotList::clear_filepath() {
  if (filepath_ != &_default_filepath_) {
    filepath_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SpotList::filepath() const {
  return *filepath_;
}
inline void SpotList::set_filepath(const ::std::string& value) {
  _set_bit(2);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void SpotList::set_filepath(const char* value) {
  _set_bit(2);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void SpotList::set_filepath(const char* value, size_t size) {
  _set_bit(2);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpotList::mutable_filepath() {
  _set_bit(2);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}

// optional int64 uid = 4;
inline bool SpotList::has_uid() const {
  return _has_bit(3);
}
inline void SpotList::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 SpotList::uid() const {
  return uid_;
}
inline void SpotList::set_uid(::google::protobuf::int64 value) {
  _set_bit(3);
  uid_ = value;
}

// optional int32 nr_pixels_x = 5;
inline bool SpotList::has_nr_pixels_x() const {
  return _has_bit(4);
}
inline void SpotList::clear_nr_pixels_x() {
  nr_pixels_x_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SpotList::nr_pixels_x() const {
  return nr_pixels_x_;
}
inline void SpotList::set_nr_pixels_x(::google::protobuf::int32 value) {
  _set_bit(4);
  nr_pixels_x_ = value;
}

// optional int32 nr_pixels_y = 6;
inline bool SpotList::has_nr_pixels_y() const {
  return _has_bit(5);
}
inline void SpotList::clear_nr_pixels_y() {
  nr_pixels_y_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 SpotList::nr_pixels_y() const {
  return nr_pixels_y_;
}
inline void SpotList::set_nr_pixels_y(::google::protobuf::int32 value) {
  _set_bit(5);
  nr_pixels_y_ = value;
}

// optional float pixel_size = 7;
inline bool SpotList::has_pixel_size() const {
  return _has_bit(6);
}
inline void SpotList::clear_pixel_size() {
  pixel_size_ = 0;
  _clear_bit(6);
}
inline float SpotList::pixel_size() const {
  return pixel_size_;
}
inline void SpotList::set_pixel_size(float value) {
  _set_bit(6);
  pixel_size_ = value;
}

// optional int64 nr_spots = 8;
inline bool SpotList::has_nr_spots() const {
  return _has_bit(7);
}
inline void SpotList::clear_nr_spots() {
  nr_spots_ = GOOGLE_LONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::int64 SpotList::nr_spots() const {
  return nr_spots_;
}
inline void SpotList::set_nr_spots(::google::protobuf::int64 value) {
  _set_bit(7);
  nr_spots_ = value;
}

// optional int32 box_size = 17;
inline bool SpotList::has_box_size() const {
  return _has_bit(8);
}
inline void SpotList::clear_box_size() {
  box_size_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 SpotList::box_size() const {
  return box_size_;
}
inline void SpotList::set_box_size(::google::protobuf::int32 value) {
  _set_bit(8);
  box_size_ = value;
}

// optional int32 nr_channels = 18;
inline bool SpotList::has_nr_channels() const {
  return _has_bit(9);
}
inline void SpotList::clear_nr_channels() {
  nr_channels_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 SpotList::nr_channels() const {
  return nr_channels_;
}
inline void SpotList::set_nr_channels(::google::protobuf::int32 value) {
  _set_bit(9);
  nr_channels_ = value;
}

// optional int32 nr_frames = 19;
inline bool SpotList::has_nr_frames() const {
  return _has_bit(10);
}
inline void SpotList::clear_nr_frames() {
  nr_frames_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 SpotList::nr_frames() const {
  return nr_frames_;
}
inline void SpotList::set_nr_frames(::google::protobuf::int32 value) {
  _set_bit(10);
  nr_frames_ = value;
}

// optional int32 nr_slices = 20;
inline bool SpotList::has_nr_slices() const {
  return _has_bit(11);
}
inline void SpotList::clear_nr_slices() {
  nr_slices_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 SpotList::nr_slices() const {
  return nr_slices_;
}
inline void SpotList::set_nr_slices(::google::protobuf::int32 value) {
  _set_bit(11);
  nr_slices_ = value;
}

// optional int32 nr_pos = 21;
inline bool SpotList::has_nr_pos() const {
  return _has_bit(12);
}
inline void SpotList::clear_nr_pos() {
  nr_pos_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 SpotList::nr_pos() const {
  return nr_pos_;
}
inline void SpotList::set_nr_pos(::google::protobuf::int32 value) {
  _set_bit(12);
  nr_pos_ = value;
}

// optional .TSF.LocationUnits location_units = 22;
inline bool SpotList::has_location_units() const {
  return _has_bit(13);
}
inline void SpotList::clear_location_units() {
  location_units_ = 0;
  _clear_bit(13);
}
inline TSF::LocationUnits SpotList::location_units() const {
  return static_cast< TSF::LocationUnits >(location_units_);
}
inline void SpotList::set_location_units(TSF::LocationUnits value) {
  GOOGLE_DCHECK(TSF::LocationUnits_IsValid(value));
  _set_bit(13);
  location_units_ = value;
}

// optional .TSF.IntensityUnits intensity_units = 23;
inline bool SpotList::has_intensity_units() const {
  return _has_bit(14);
}
inline void SpotList::clear_intensity_units() {
  intensity_units_ = 0;
  _clear_bit(14);
}
inline TSF::IntensityUnits SpotList::intensity_units() const {
  return static_cast< TSF::IntensityUnits >(intensity_units_);
}
inline void SpotList::set_intensity_units(TSF::IntensityUnits value) {
  GOOGLE_DCHECK(TSF::IntensityUnits_IsValid(value));
  _set_bit(14);
  intensity_units_ = value;
}

// optional .TSF.FitMode fit_mode = 24;
inline bool SpotList::has_fit_mode() const {
  return _has_bit(15);
}
inline void SpotList::clear_fit_mode() {
  fit_mode_ = 0;
  _clear_bit(15);
}
inline TSF::FitMode SpotList::fit_mode() const {
  return static_cast< TSF::FitMode >(fit_mode_);
}
inline void SpotList::set_fit_mode(TSF::FitMode value) {
  GOOGLE_DCHECK(TSF::FitMode_IsValid(value));
  _set_bit(15);
  fit_mode_ = value;
}

// optional bool is_track = 25 [default = false];
inline bool SpotList::has_is_track() const {
  return _has_bit(16);
}
inline void SpotList::clear_is_track() {
  is_track_ = false;
  _clear_bit(16);
}
inline bool SpotList::is_track() const {
  return is_track_;
}
inline void SpotList::set_is_track(bool value) {
  _set_bit(16);
  is_track_ = value;
}

// -------------------------------------------------------------------

// Spot

// required int32 molecule = 1;
inline bool Spot::has_molecule() const {
  return _has_bit(0);
}
inline void Spot::clear_molecule() {
  molecule_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Spot::molecule() const {
  return molecule_;
}
inline void Spot::set_molecule(::google::protobuf::int32 value) {
  _set_bit(0);
  molecule_ = value;
}

// required int32 channel = 2;
inline bool Spot::has_channel() const {
  return _has_bit(1);
}
inline void Spot::clear_channel() {
  channel_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Spot::channel() const {
  return channel_;
}
inline void Spot::set_channel(::google::protobuf::int32 value) {
  _set_bit(1);
  channel_ = value;
}

// required int32 frame = 3;
inline bool Spot::has_frame() const {
  return _has_bit(2);
}
inline void Spot::clear_frame() {
  frame_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 Spot::frame() const {
  return frame_;
}
inline void Spot::set_frame(::google::protobuf::int32 value) {
  _set_bit(2);
  frame_ = value;
}

// optional int32 slice = 4;
inline bool Spot::has_slice() const {
  return _has_bit(3);
}
inline void Spot::clear_slice() {
  slice_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Spot::slice() const {
  return slice_;
}
inline void Spot::set_slice(::google::protobuf::int32 value) {
  _set_bit(3);
  slice_ = value;
}

// optional int32 pos = 5;
inline bool Spot::has_pos() const {
  return _has_bit(4);
}
inline void Spot::clear_pos() {
  pos_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Spot::pos() const {
  return pos_;
}
inline void Spot::set_pos(::google::protobuf::int32 value) {
  _set_bit(4);
  pos_ = value;
}

// optional .TSF.LocationUnits location_units = 17;
inline bool Spot::has_location_units() const {
  return _has_bit(5);
}
inline void Spot::clear_location_units() {
  location_units_ = 0;
  _clear_bit(5);
}
inline TSF::LocationUnits Spot::location_units() const {
  return static_cast< TSF::LocationUnits >(location_units_);
}
inline void Spot::set_location_units(TSF::LocationUnits value) {
  GOOGLE_DCHECK(TSF::LocationUnits_IsValid(value));
  _set_bit(5);
  location_units_ = value;
}

// required float x = 7;
inline bool Spot::has_x() const {
  return _has_bit(6);
}
inline void Spot::clear_x() {
  x_ = 0;
  _clear_bit(6);
}
inline float Spot::x() const {
  return x_;
}
inline void Spot::set_x(float value) {
  _set_bit(6);
  x_ = value;
}

// required float y = 8;
inline bool Spot::has_y() const {
  return _has_bit(7);
}
inline void Spot::clear_y() {
  y_ = 0;
  _clear_bit(7);
}
inline float Spot::y() const {
  return y_;
}
inline void Spot::set_y(float value) {
  _set_bit(7);
  y_ = value;
}

// optional float z = 9;
inline bool Spot::has_z() const {
  return _has_bit(8);
}
inline void Spot::clear_z() {
  z_ = 0;
  _clear_bit(8);
}
inline float Spot::z() const {
  return z_;
}
inline void Spot::set_z(float value) {
  _set_bit(8);
  z_ = value;
}

// optional .TSF.IntensityUnits intensity_units = 18;
inline bool Spot::has_intensity_units() const {
  return _has_bit(9);
}
inline void Spot::clear_intensity_units() {
  intensity_units_ = 0;
  _clear_bit(9);
}
inline TSF::IntensityUnits Spot::intensity_units() const {
  return static_cast< TSF::IntensityUnits >(intensity_units_);
}
inline void Spot::set_intensity_units(TSF::IntensityUnits value) {
  GOOGLE_DCHECK(TSF::IntensityUnits_IsValid(value));
  _set_bit(9);
  intensity_units_ = value;
}

// required float intensity = 10;
inline bool Spot::has_intensity() const {
  return _has_bit(10);
}
inline void Spot::clear_intensity() {
  intensity_ = 0;
  _clear_bit(10);
}
inline float Spot::intensity() const {
  return intensity_;
}
inline void Spot::set_intensity(float value) {
  _set_bit(10);
  intensity_ = value;
}

// optional float background = 11;
inline bool Spot::has_background() const {
  return _has_bit(11);
}
inline void Spot::clear_background() {
  background_ = 0;
  _clear_bit(11);
}
inline float Spot::background() const {
  return background_;
}
inline void Spot::set_background(float value) {
  _set_bit(11);
  background_ = value;
}

// optional float width = 12;
inline bool Spot::has_width() const {
  return _has_bit(12);
}
inline void Spot::clear_width() {
  width_ = 0;
  _clear_bit(12);
}
inline float Spot::width() const {
  return width_;
}
inline void Spot::set_width(float value) {
  _set_bit(12);
  width_ = value;
}

// optional float a = 13;
inline bool Spot::has_a() const {
  return _has_bit(13);
}
inline void Spot::clear_a() {
  a_ = 0;
  _clear_bit(13);
}
inline float Spot::a() const {
  return a_;
}
inline void Spot::set_a(float value) {
  _set_bit(13);
  a_ = value;
}

// optional float theta = 14;
inline bool Spot::has_theta() const {
  return _has_bit(14);
}
inline void Spot::clear_theta() {
  theta_ = 0;
  _clear_bit(14);
}
inline float Spot::theta() const {
  return theta_;
}
inline void Spot::set_theta(float value) {
  _set_bit(14);
  theta_ = value;
}

// optional int32 flag = 6;
inline bool Spot::has_flag() const {
  return _has_bit(15);
}
inline void Spot::clear_flag() {
  flag_ = 0;
  _clear_bit(15);
}
inline ::google::protobuf::int32 Spot::flag() const {
  return flag_;
}
inline void Spot::set_flag(::google::protobuf::int32 value) {
  _set_bit(15);
  flag_ = value;
}

// optional float x_original = 101;
inline bool Spot::has_x_original() const {
  return _has_bit(16);
}
inline void Spot::clear_x_original() {
  x_original_ = 0;
  _clear_bit(16);
}
inline float Spot::x_original() const {
  return x_original_;
}
inline void Spot::set_x_original(float value) {
  _set_bit(16);
  x_original_ = value;
}

// optional float y_original = 102;
inline bool Spot::has_y_original() const {
  return _has_bit(17);
}
inline void Spot::clear_y_original() {
  y_original_ = 0;
  _clear_bit(17);
}
inline float Spot::y_original() const {
  return y_original_;
}
inline void Spot::set_y_original(float value) {
  _set_bit(17);
  y_original_ = value;
}

// optional float z_original = 103;
inline bool Spot::has_z_original() const {
  return _has_bit(18);
}
inline void Spot::clear_z_original() {
  z_original_ = 0;
  _clear_bit(18);
}
inline float Spot::z_original() const {
  return z_original_;
}
inline void Spot::set_z_original(float value) {
  _set_bit(18);
  z_original_ = value;
}

// optional float x_precision = 104;
inline bool Spot::has_x_precision() const {
  return _has_bit(19);
}
inline void Spot::clear_x_precision() {
  x_precision_ = 0;
  _clear_bit(19);
}
inline float Spot::x_precision() const {
  return x_precision_;
}
inline void Spot::set_x_precision(float value) {
  _set_bit(19);
  x_precision_ = value;
}

// optional float y_precision = 105;
inline bool Spot::has_y_precision() const {
  return _has_bit(20);
}
inline void Spot::clear_y_precision() {
  y_precision_ = 0;
  _clear_bit(20);
}
inline float Spot::y_precision() const {
  return y_precision_;
}
inline void Spot::set_y_precision(float value) {
  _set_bit(20);
  y_precision_ = value;
}

// optional float z_precision = 106;
inline bool Spot::has_z_precision() const {
  return _has_bit(21);
}
inline void Spot::clear_z_precision() {
  z_precision_ = 0;
  _clear_bit(21);
}
inline float Spot::z_precision() const {
  return z_precision_;
}
inline void Spot::set_z_precision(float value) {
  _set_bit(21);
  z_precision_ = value;
}

// optional int32 x_position = 107;
inline bool Spot::has_x_position() const {
  return _has_bit(22);
}
inline void Spot::clear_x_position() {
  x_position_ = 0;
  _clear_bit(22);
}
inline ::google::protobuf::int32 Spot::x_position() const {
  return x_position_;
}
inline void Spot::set_x_position(::google::protobuf::int32 value) {
  _set_bit(22);
  x_position_ = value;
}

// optional int32 y_position = 108;
inline bool Spot::has_y_position() const {
  return _has_bit(23);
}
inline void Spot::clear_y_position() {
  y_position_ = 0;
  _clear_bit(23);
}
inline ::google::protobuf::int32 Spot::y_position() const {
  return y_position_;
}
inline void Spot::set_y_position(::google::protobuf::int32 value) {
  _set_bit(23);
  y_position_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSF

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< TSF::FitMode>() {
  return TSF::FitMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< TSF::IntensityUnits>() {
  return TSF::IntensityUnits_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< TSF::LocationUnits>() {
  return TSF::LocationUnits_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TSFProto_2eproto__INCLUDED
